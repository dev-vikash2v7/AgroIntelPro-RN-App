{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar React = _react;\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar _reactNative = require(\"react-native\");\nvar _PanGestureHandler = require(\"../handlers/PanGestureHandler\");\nvar _TapGestureHandler = require(\"../handlers/TapGestureHandler\");\nvar _State = require(\"../State\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  (0, _inherits2.default)(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, DrawerLayout);\n    _this = _super.call(this, _props);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openValue\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onGestureEvent\", void 0);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"accessibilityIsModalView\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"pointerEventsView\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"panGestureHandler\", React.createRef());\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"drawerShown\", false);\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n      _this.onGestureEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n        _this.setState({\n          drawerState: DRAGGING\n        });\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n        drawerWidth = _this$props6.drawerWidth,\n        drawerPosition = _this$props6.drawerPosition,\n        drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n        drawerPosition = _this$props7.drawerPosition,\n        minSwipeDistance = _this$props7.minSwipeDistance,\n        edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this.updateShowing(willShow);\n      _this.emitStateChanged(SETTLING, willShow);\n      _this.setState({\n        drawerState: SETTLING\n      });\n      if (_this.props.hideStatusBar) {\n        _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      _reactNative.Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n          _this.setState({\n            drawerOpened: willShow\n          });\n          if (_this.state.drawerState !== DRAGGING) {\n            _this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderOverlay\", function () {\n      (0, _invariant.default)(_this.openValue, 'should be set');\n      var overlayOpacity;\n      if (_this.state.drawerState !== IDLE) {\n        overlayOpacity = _this.openValue;\n      } else {\n        overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n      }\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(_TapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(_reactNative.Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n        drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n        drawerWidth = _this$props8.drawerWidth,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        drawerContainerStyle = _this$props8.drawerContainerStyle,\n        contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (_this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(_reactNative.Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(_reactNative.View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n    var _dragX = new _reactNative.Animated.Value(0);\n    var _touchX = new _reactNative.Animated.Value(0);\n    var _drawerTranslation = new _reactNative.Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  (0, _createClass2.default)(DrawerLayout, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerLockMode = _this$props9.drawerLockMode,\n        edgeWidth = _this$props9.edgeWidth,\n        minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(_PanGestureHandler.PanGestureHandler, {\n        userSelect: this.props.userSelect,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(_react.Component);\nexports.default = DrawerLayout;\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\nvar styles = _reactNative.StyleSheet.create({\n  drawerContainer: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["_react","_interopRequireWildcard","require","React","_invariant","_interopRequireDefault","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","e","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_Component","_inherits2","_super","_props","_this","_classCallCheck2","_defineProperty","_assertThisInitialized2","createRef","props","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","_ref","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","_ref2","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","_ref3","drawerShown","drawerLockMode","closeDrawer","_ref4","_this$props6","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","_this$props7","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","_ref5","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","length","forceUpdate","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","_this$props8","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","_dragX","_touchX","_drawerTranslation","updateAnimatedEvent","_createClass2","value","shouldComponentUpdate","render","_this$props9","PanGestureHandler","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","exports","Left","Right","StyleSheet","create","assign","absoluteFillObject","zIndex","flex","overflow"],"sources":["E:\\Crop Disease Classifier- Hackaton project\\Android App\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}