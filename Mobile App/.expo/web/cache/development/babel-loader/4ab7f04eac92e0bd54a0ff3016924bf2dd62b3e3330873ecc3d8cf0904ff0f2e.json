{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _hammerjs = _interopRequireDefault(require(\"@egjs/hammerjs\"));\nvar _reactNative = require(\"react-native\");\nvar _State = require(\"../State\");\nvar _constants = require(\"./constants\");\nvar NodeManager = _interopRequireWildcard(require(\"./NodeManager\"));\nvar _excluded = [\"enabled\"];\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar gestureInstances = 0;\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    (0, _classCallCheck2.default)(this, GestureHandler);\n    _defineProperty(this, \"handlerTag\", void 0);\n    _defineProperty(this, \"isGestureRunning\", false);\n    _defineProperty(this, \"view\", null);\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n    _defineProperty(this, \"hasGestureFailed\", false);\n    _defineProperty(this, \"hammer\", null);\n    _defineProperty(this, \"initialRotation\", null);\n    _defineProperty(this, \"__initialX\", void 0);\n    _defineProperty(this, \"__initialY\", void 0);\n    _defineProperty(this, \"config\", {});\n    _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n    _defineProperty(this, \"pendingGestures\", {});\n    _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n    _defineProperty(this, \"lastSentState\", null);\n    _defineProperty(this, \"gestureInstance\", void 0);\n    _defineProperty(this, \"_stillWaiting\", void 0);\n    _defineProperty(this, \"propsRef\", void 0);\n    _defineProperty(this, \"ref\", void 0);\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var gesture of _this.config.waitFor) {\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n        _this.hammer.destroy();\n      }\n      _this.hammer = null;\n    });\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      var rect = _this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var event = _this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n      if (!gesture) return;\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n          _this._stillWaiting = _this._getPendingGestures();\n          if (_this._stillWaiting.length) {\n            for (var _gesture2 of _this._stillWaiting) {\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, Object.assign({}, inputData, {\n            deltaRotation: deltaRotation\n          })),\n          success = _this$isGestureEnable.success,\n          failed = _this$isGestureEnable.failed;\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n          _this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      var params = _this.getHammerConfig();\n      gesture.set(Object.assign({}, params, {\n        enable: enable\n      }));\n    });\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  (0, _createClass2.default)(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n  }, {\n    key: \"isNative\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n        enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(Object.assign({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (var gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n        numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: Object.assign({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event), {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(Object.assign({}, event, {\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"shouldUseTouchEvents\",\n    value: function shouldUseTouchEvents(config) {\n      var _config$simultaneousH, _config$simultaneousH2;\n      return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some(function (handler) {\n        return handler.isNative;\n      })) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n      var SUPPORTS_TOUCH = ('ontouchstart' in window);\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n        inputClass: _hammerjs.default.TouchInput\n      }) : new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n        _this2.onRawEvent(ev);\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(`${this.name}end ${this.name}cancel`, function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n        deltaY = _ref4.deltaY,\n        rotation = _ref4.rotation;\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }, {\n    key: \"ensureConfig\",\n    value: function ensureConfig(config) {\n      var _this4 = this;\n      var props = Object.assign({}, config);\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n          var handlerTag = _ref6.handlerTag;\n          return NodeManager.getHandler(handlerTag);\n        }).filter(function (v) {\n          return v;\n        });\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        var shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(function (handler) {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(function (v) {\n          return v;\n        });\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          queueMicrotask(function () {\n            _this4.destroy();\n            _this4.setView(_this4.ref, _this4.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(function (prop) {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props;\n    }\n  }]);\n  return GestureHandler;\n}();\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n          if (Array.isArray(argMapping)) {\n            for (var _ref7 of argMapping.entries()) {\n              var _ref8 = (0, _slicedToArray2.default)(_ref7, 2);\n              var index = _ref8[0];\n              var _ref8$ = (0, _slicedToArray2.default)(_ref8[1], 2);\n              var key = _ref8$[0];\n              var value = _ref8$[1];\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nvar _default = GestureHandler;\nexports.default = _default;","map":{"version":3,"names":["_hammerjs","_interopRequireDefault","require","_reactNative","_State","_constants","NodeManager","_interopRequireWildcard","gestureInstances","GestureHandler","_this","_classCallCheck2","default","_defineProperty","State","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","id","clearSelfAsPending","hammer","stop","destroy","_ref","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","lastSentState","state","get","name","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","Object","assign","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","_createClass2","key","Error","value","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","props","_objectWithoutProperties2","_excluded","ensureConfig","sync","getState","type","EventMap","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","Hammer","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","shouldUseTouchEvents","_config$simultaneousH","_config$simultaneousH2","simultaneousHandlers","some","handler","isNative","setView","_this2","SUPPORTS_TOUCH","window","findNodeHandle","Manager","inputClass","TouchInput","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","_this4","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref6","getHandler","v","queueMicrotask","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","_ref7","entries","_ref8","_slicedToArray2","index","_ref8$","nativeValue","setValue","_default","exports"],"sources":["D:\\vikash\\AgroIntelPro-RN-App\\node_modules\\react-native-gesture-handler\\lib\\module\\web_hammer\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        queueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: typeof configProps[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}