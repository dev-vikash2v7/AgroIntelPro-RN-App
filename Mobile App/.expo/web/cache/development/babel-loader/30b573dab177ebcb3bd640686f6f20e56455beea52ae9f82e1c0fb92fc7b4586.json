{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = usePressEvents;\nvar _PressResponder = _interopRequireDefault(require(\"./PressResponder\"));\nvar _react = require(\"react\");\nfunction usePressEvents(hostRef, config) {\n  var pressResponderRef = (0, _react.useRef)(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new _PressResponder.default(config);\n  }\n  var pressResponder = pressResponderRef.current;\n  (0, _react.useEffect)(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  (0, _react.useEffect)(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  (0, _react.useDebugValue)(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","usePressEvents","_PressResponder","_react","hostRef","config","pressResponderRef","useRef","current","PressResponder","pressResponder","useEffect","configure","reset","useDebugValue","getEventHandlers"],"sources":["D:/vikash/AgroIntelPro-RN-App/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n  var pressResponder = pressResponderRef.current;\n\n  // Re-configure to use the current node and configuration.\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n\n  // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA,GAAAC,cAAA;AAEb,IAAAC,eAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,MAAA,GAAAR,OAAA;AACe,SAASM,cAAcA,CAACG,OAAO,EAAEC,MAAM,EAAE;EACtD,IAAIC,iBAAiB,GAAG,IAAAC,aAAM,EAAC,IAAI,CAAC;EACpC,IAAID,iBAAiB,CAACE,OAAO,IAAI,IAAI,EAAE;IACrCF,iBAAiB,CAACE,OAAO,GAAG,IAAIC,uBAAc,CAACJ,MAAM,CAAC;EACxD;EACA,IAAIK,cAAc,GAAGJ,iBAAiB,CAACE,OAAO;EAG9C,IAAAG,gBAAS,EAAC,YAAM;IACdD,cAAc,CAACE,SAAS,CAACP,MAAM,CAAC;EAClC,CAAC,EAAE,CAACA,MAAM,EAAEK,cAAc,CAAC,CAAC;EAI5B,IAAAC,gBAAS,EAAC,YAAM;IACd,OAAO,YAAM;MACXD,cAAc,CAACG,KAAK,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC;EACpB,IAAAI,oBAAa,EAACT,MAAM,CAAC;EACrB,OAAOK,cAAc,CAACK,gBAAgB,CAAC,CAAC;AAC1C"},"metadata":{},"sourceType":"script","externalDependencies":[]}