{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interpolateSharableColor = exports.interpolateColor = exports.Extrapolate = exports.ColorSpace = void 0;\nexports.useInterpolateConfig = useInterpolateConfig;\nvar _Colors = require(\"./Colors\");\nvar _core = require(\"./core\");\nvar _interpolation = require(\"./interpolation\");\nvar _useSharedValue = require(\"./hook/useSharedValue\");\nvar Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nexports.Extrapolate = Extrapolate;\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {\n  'worklet';\n\n  var h = 0;\n  var _options$useCorrected = options.useCorrectedHSVInterpolation,\n    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n  if (useCorrectedHSVInterpolation) {\n    var correctedInputRange = [inputRange[0]];\n    var originalH = colors.h;\n    var correctedH = [originalH[0]];\n    for (var i = 1; i < originalH.length; ++i) {\n      var d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h = ((0, _interpolation.interpolate)(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n  } else {\n    h = (0, _interpolation.interpolate)(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, Extrapolate.CLAMP);\n  var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, Extrapolate.CLAMP);\n  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return (0, _Colors.hsvToColor)(h, s, v, a);\n};\nvar toLinearSpace = function toLinearSpace(x, gamma) {\n  'worklet';\n\n  return x.map(function (v) {\n    return Math.pow(v / 255, gamma);\n  });\n};\nvar toGammaSpace = function toGammaSpace(x, gamma) {\n  'worklet';\n\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {\n  'worklet';\n\n  var _options$gamma = options.gamma,\n    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n  var outputR = colors.r,\n    outputG = colors.g,\n    outputB = colors.b;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  var r = (0, _interpolation.interpolate)(value, inputRange, outputR, Extrapolate.CLAMP);\n  var g = (0, _interpolation.interpolate)(value, inputRange, outputG, Extrapolate.CLAMP);\n  var b = (0, _interpolation.interpolate)(value, inputRange, outputB, Extrapolate.CLAMP);\n  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return (0, _Colors.rgbaColor)(r, g, b, a);\n  }\n  return (0, _Colors.rgbaColor)(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = (0, _Colors.processColor)(color);\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push((0, _Colors.red)(processedColor));\n      g.push((0, _Colors.green)(processedColor));\n      b.push((0, _Colors.blue)(processedColor));\n      a.push((0, _Colors.opacity)(processedColor));\n    }\n  }\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n  var a = [];\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var processedColor = (0, _Colors.processColor)(color);\n    if (typeof processedColor === 'number') {\n      var processedHSVColor = (0, _Colors.RGBtoHSV)((0, _Colors.red)(processedColor), (0, _Colors.green)(processedColor), (0, _Colors.blue)(processedColor));\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push((0, _Colors.opacity)(processedColor));\n    }\n  }\n  return {\n    h: h,\n    s: s,\n    v: v,\n    a: a\n  };\n};\nvar interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n  }\n  throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexports.interpolateColor = interpolateColor;\nvar ColorSpace = function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n  return ColorSpace;\n}({});\nexports.ColorSpace = ColorSpace;\nfunction useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return (0, _useSharedValue.useSharedValue)({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: (0, _core.makeMutable)(null),\n    options: options\n  });\n}\nvar interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n  }\n  throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexports.interpolateSharableColor = interpolateSharableColor;","map":{"version":3,"names":["_Colors","require","_core","_interpolation","_useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","exports","interpolateColorsHSV","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","interpolate","s","v","a","hsvToColor","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","rgbaColor","getInterpolateRGB","color","processedColor","processColor","undefined","red","green","blue","opacity","getInterpolateHSV","processedHSVColor","RGBtoHSV","interpolateColor","outputRange","colorSpace","arguments","Error","ColorSpace","useInterpolateConfig","RGB","useSharedValue","cache","makeMutable","interpolateSharableColor","interpolateConfig","HSV"],"sources":["D:\\vikash\\AgroIntelPro-RN-App\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}