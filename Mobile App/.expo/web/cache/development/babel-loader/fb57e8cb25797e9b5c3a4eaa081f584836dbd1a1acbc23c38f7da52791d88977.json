{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScrollViewOffset = useScrollViewOffset;\nvar _react = require(\"react\");\nvar _reactNative = require(\"react-native\");\nvar _utils = require(\"./utils\");\nvar _useSharedValue = require(\"./useSharedValue\");\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nfunction useScrollViewOffset(aref, initialRef) {\n  var offsetRef = (0, _react.useRef)(initialRef !== undefined ? initialRef : (0, _useSharedValue.useSharedValue)(0));\n  var event = (0, _utils.useEvent)(function (event) {\n    'worklet';\n\n    offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n  }, scrollEventNames);\n  (0, _react.useEffect)(function () {\n    var _event$current;\n    var viewTag = (0, _reactNative.findNodeHandle)(aref.current);\n    (_event$current = event.current) === null || _event$current === void 0 ? void 0 : _event$current.registerForEvents(viewTag);\n  }, [aref.current]);\n  return offsetRef.current;\n}","map":{"version":3,"names":["_react","require","_reactNative","_utils","_useSharedValue","scrollEventNames","useScrollViewOffset","aref","initialRef","offsetRef","useRef","undefined","useSharedValue","event","useEvent","current","value","contentOffset","x","y","useEffect","_event$current","viewTag","findNodeHandle","registerForEvents"],"sources":["E:\\Crop Disease Classifier- Hackaton project\\Android App\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\hook\\useScrollViewOffset.ts"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react';\n\nimport type Animated from 'react-native-reanimated';\nimport { ScrollEvent } from './useAnimatedScrollHandler';\nimport { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport { useEvent } from './utils';\nimport { useSharedValue } from './useSharedValue';\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\nexport function useScrollViewOffset(\n  aref: RefObject<Animated.ScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number> {\n  const offsetRef = useRef(\n    initialRef !== undefined ? initialRef : useSharedValue(0)\n  );\n\n  const event = useEvent<ScrollEvent>((event: ScrollEvent) => {\n    'worklet';\n    offsetRef.current.value =\n      event.contentOffset.x === 0\n        ? event.contentOffset.y\n        : event.contentOffset.x;\n  }, scrollEventNames);\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(aref.current);\n    event.current?.registerForEvents(viewTag as number);\n  }, [aref.current]);\n\n  return offsetRef.current;\n}\n"],"mappings":";;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAKA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AAEA,IAAMI,gBAAgB,GAAG,CACvB,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB;AAEM,SAASC,mBAAmBA,CACjCC,IAAoC,EACpCC,UAAgC,EACX;EACrB,IAAMC,SAAS,GAAG,IAAAC,aAAM,EACtBF,UAAU,KAAKG,SAAS,GAAGH,UAAU,GAAG,IAAAI,8BAAc,EAAC,CAAC,CAAC,CAC1D;EAED,IAAMC,KAAK,GAAG,IAAAC,eAAQ,EAAe,UAAAD,KAAkB,EAAK;IAC1D,SAAS;;IACTJ,SAAS,CAACM,OAAO,CAACC,KAAK,GACrBH,KAAK,CAACI,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBL,KAAK,CAACI,aAAa,CAACE,CAAC,GACrBN,KAAK,CAACI,aAAa,CAACC,CAAC;EAC7B,CAAC,EAAEb,gBAAgB,CAAC;EAEpB,IAAAe,gBAAS,EAAC,YAAM;IAAA,IAAAC,cAAA;IACd,IAAMC,OAAO,GAAG,IAAAC,2BAAc,EAAChB,IAAI,CAACQ,OAAO,CAAC;IAC5C,CAAAM,cAAA,GAAAR,KAAK,CAACE,OAAO,cAAAM,cAAA,uBAAbA,cAAA,CAAeG,iBAAiB,CAACF,OAAO,CAAW;EACrD,CAAC,EAAE,CAACf,IAAI,CAACQ,OAAO,CAAC,CAAC;EAElB,OAAON,SAAS,CAACM,OAAO;AAC1B"},"metadata":{},"sourceType":"script","externalDependencies":[]}