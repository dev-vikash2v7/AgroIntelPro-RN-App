{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextInputAdapter = exports.SVGAdapter = void 0;\nexports.createAnimatedPropAdapter = createAnimatedPropAdapter;\nvar _ConfigHelper = require(\"../ConfigHelper\");\nfunction createAnimatedPropAdapter(adapter, nativeProps) {\n  var nativePropsToAdd = {};\n  nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach(function (prop) {\n    nativePropsToAdd[prop] = true;\n  });\n  (0, _ConfigHelper.addWhitelistedNativeProps)(nativePropsToAdd);\n  return adapter;\n}\nvar SVGAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var keys = Object.keys(props);\n  if (keys.includes('transform')) {\n    if (Array.isArray(props.transform)) {\n      var _props$x, _props$y;\n      if (props.transform.length !== 6) {\n        throw new Error(`invalid transform length of ${props.transform.length}, should be 6`);\n      }\n      var transform = props.transform;\n      var x = (_props$x = props.x) != null ? _props$x : 0;\n      var y = (_props$y = props.y) != null ? _props$y : 0;\n      props.transform = [{\n        translateX: transform[0] * x + transform[2] * y + transform[4]\n      }, {\n        translateY: transform[1] * x + transform[3] * y + transform[5]\n      }];\n    } else if (typeof props.transform === 'string') {\n      var _transform = props.transform;\n      var arr = _transform.replace('translate(', '').replace(')', '').split(' ');\n      props.transform = [{\n        translateX: parseFloat(arr[0])\n      }, {\n        translateY: parseFloat(arr[1])\n      }];\n    }\n  }\n});\nexports.SVGAdapter = SVGAdapter;\nvar TextInputAdapter = createAnimatedPropAdapter(function (props) {\n  'worklet';\n\n  var keys = Object.keys(props);\n  if (keys.includes('value')) {\n    props.text = props.value;\n    delete props.value;\n  }\n}, ['text']);\nexports.TextInputAdapter = TextInputAdapter;","map":{"version":3,"names":["_ConfigHelper","require","createAnimatedPropAdapter","adapter","nativeProps","nativePropsToAdd","forEach","prop","addWhitelistedNativeProps","SVGAdapter","props","keys","Object","includes","Array","isArray","transform","_props$x","_props$y","length","Error","x","y","translateX","translateY","arr","replace","split","parseFloat","exports","TextInputAdapter","text","value"],"sources":["E:\\Crop Disease Classifier- Hackaton project\\Android App\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\PropAdapters.ts"],"sourcesContent":["import { addWhitelistedNativeProps } from '../ConfigHelper';\nimport { AdapterWorkletFunction } from './commonTypes';\n\nexport function createAnimatedPropAdapter(\n  adapter: AdapterWorkletFunction,\n  nativeProps?: string[]\n): AdapterWorkletFunction {\n  const nativePropsToAdd: { [key: string]: boolean } = {};\n  // eslint-disable-next-line no-unused-expressions\n  nativeProps?.forEach((prop) => {\n    nativePropsToAdd[prop] = true;\n  });\n  addWhitelistedNativeProps(nativePropsToAdd);\n  return adapter;\n}\n\n// ADAPTERS\n\nexport const SVGAdapter: AdapterWorkletFunction = createAnimatedPropAdapter(\n  (props) => {\n    'worklet';\n    const keys = Object.keys(props);\n    // transform\n    if (keys.includes('transform')) {\n      if (Array.isArray(props.transform)) {\n        // case of array with 6 values => https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/elements/Shape.tsx#L200\n        if (props.transform.length !== 6) {\n          throw new Error(\n            `invalid transform length of ${props.transform.length}, should be 6`\n          );\n        }\n        const transform: number[] = props.transform as number[];\n        const x: number = (props.x as number) ?? 0;\n        const y: number = (props.y as number) ?? 0;\n        props.transform = [\n          { translateX: transform[0] * x + transform[2] * y + transform[4] },\n          { translateY: transform[1] * x + transform[3] * y + transform[5] },\n        ];\n      } else if (typeof props.transform === 'string') {\n        // case of string 'translate(translateX translateY)'\n        // todo: handle other cases of transform string like here https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/lib/extract/extractTransform.ts#L184\n        const transform: string = props.transform as string;\n        const arr = transform\n          .replace('translate(', '')\n          .replace(')', '')\n          .split(' ');\n        props.transform = [\n          { translateX: parseFloat(arr[0]) },\n          { translateY: parseFloat(arr[1]) },\n        ];\n      }\n    }\n    // todo: other props\n  }\n);\n\nexport const TextInputAdapter = createAnimatedPropAdapter(\n  (props) => {\n    'worklet';\n    const keys = Object.keys(props);\n    // convert text to value like RN does here: https://github.com/facebook/react-native/blob/f2c6279ca497b34d5a2bfbb6f2d33dc7a7bea02a/Libraries/Components/TextInput/TextInput.js#L878\n    if (keys.includes('value')) {\n      props.text = props.value;\n      delete props.value;\n    }\n  },\n  ['text']\n);\n"],"mappings":";;;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AAGO,SAASC,yBAAyBA,CACvCC,OAA+B,EAC/BC,WAAsB,EACE;EACxB,IAAMC,gBAA4C,GAAG,CAAC,CAAC;EAEvDD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,OAAO,CAAE,UAAAC,IAAI,EAAK;IAC7BF,gBAAgB,CAACE,IAAI,CAAC,GAAG,IAAI;EAC/B,CAAC,CAAC;EACF,IAAAC,uCAAyB,EAACH,gBAAgB,CAAC;EAC3C,OAAOF,OAAO;AAChB;AAIO,IAAMM,UAAkC,GAAGP,yBAAyB,CACxE,UAAAQ,KAAK,EAAK;EACT,SAAS;;EACT,IAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,KAAK,CAAC;EAE/B,IAAIC,IAAI,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;IAC9B,IAAIC,KAAK,CAACC,OAAO,CAACL,KAAK,CAACM,SAAS,CAAC,EAAE;MAAA,IAAAC,QAAA,EAAAC,QAAA;MAElC,IAAIR,KAAK,CAACM,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,IAAIC,KAAK,CACZ,+BAA8BV,KAAK,CAACM,SAAS,CAACG,MAAO,eAAc,CACrE;MACH;MACA,IAAMH,SAAmB,GAAGN,KAAK,CAACM,SAAqB;MACvD,IAAMK,CAAS,IAAAJ,QAAA,GAAIP,KAAK,CAACW,CAAC,YAAAJ,QAAA,GAAe,CAAC;MAC1C,IAAMK,CAAS,IAAAJ,QAAA,GAAIR,KAAK,CAACY,CAAC,YAAAJ,QAAA,GAAe,CAAC;MAC1CR,KAAK,CAACM,SAAS,GAAG,CAChB;QAAEO,UAAU,EAAEP,SAAS,CAAC,CAAC,CAAC,GAAGK,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGM,CAAC,GAAGN,SAAS,CAAC,CAAC;MAAE,CAAC,EAClE;QAAEQ,UAAU,EAAER,SAAS,CAAC,CAAC,CAAC,GAAGK,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGM,CAAC,GAAGN,SAAS,CAAC,CAAC;MAAE,CAAC,CACnE;IACH,CAAC,MAAM,IAAI,OAAON,KAAK,CAACM,SAAS,KAAK,QAAQ,EAAE;MAG9C,IAAMA,UAAiB,GAAGN,KAAK,CAACM,SAAmB;MACnD,IAAMS,GAAG,GAAGT,UAAS,CAClBU,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CACzBA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAChBC,KAAK,CAAC,GAAG,CAAC;MACbjB,KAAK,CAACM,SAAS,GAAG,CAChB;QAAEO,UAAU,EAAEK,UAAU,CAACH,GAAG,CAAC,CAAC,CAAC;MAAE,CAAC,EAClC;QAAED,UAAU,EAAEI,UAAU,CAACH,GAAG,CAAC,CAAC,CAAC;MAAE,CAAC,CACnC;IACH;EACF;AAEF,CAAC,CACF;AAAAI,OAAA,CAAApB,UAAA,GAAAA,UAAA;AAEM,IAAMqB,gBAAgB,GAAG5B,yBAAyB,CACtD,UAAAQ,KAAK,EAAK;EACT,SAAS;;EACT,IAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,KAAK,CAAC;EAE/B,IAAIC,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE;IAC1BH,KAAK,CAACqB,IAAI,GAAGrB,KAAK,CAACsB,KAAK;IACxB,OAAOtB,KAAK,CAACsB,KAAK;EACpB;AACF,CAAC,EACD,CAAC,MAAM,CAAC,CACT;AAAAH,OAAA,CAAAC,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}