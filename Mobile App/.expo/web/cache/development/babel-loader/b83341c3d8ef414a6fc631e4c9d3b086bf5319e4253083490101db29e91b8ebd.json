{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _FloatInputWithRange = _interopRequireDefault(require(\"../../Components/FloatInputWithRange\"));\nvar _colors = _interopRequireDefault(require(\"../../../Constants/colors\"));\nvar _axios = _interopRequireDefault(require(\"axios\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"E:\\\\Crop Disease Classifier- Hackaton project\\\\Android App\\\\src\\\\EXPO\\\\Screens\\\\Crop Model Screens\\\\CropRecommend.js\";\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar CropRecommendationScreen = function CropRecommendationScreen() {\n  var _ref;\n  var _useState = (0, _react.useState)('1'),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    N = _useState2[0],\n    setN = _useState2[1];\n  var _useState3 = (0, _react.useState)('1'),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    P = _useState4[0],\n    setP = _useState4[1];\n  var _useState5 = (0, _react.useState)('1'),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    K = _useState6[0],\n    setK = _useState6[1];\n  var _useState7 = (0, _react.useState)('1'),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    humidity = _useState8[0],\n    setHumidity = _useState8[1];\n  var _useState9 = (0, _react.useState)('1'),\n    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n    temp = _useState10[0],\n    setTemp = _useState10[1];\n  var _useState11 = (0, _react.useState)('1'),\n    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),\n    ph = _useState12[0],\n    setPh = _useState12[1];\n  var _useState13 = (0, _react.useState)('1'),\n    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),\n    rainfall = _useState14[0],\n    setRainfall = _useState14[1];\n  var _useState15 = (0, _react.useState)(''),\n    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),\n    predictedCrop = _useState16[0],\n    setPredictedCrop = _useState16[1];\n  var _useState17 = (0, _react.useState)(false),\n    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),\n    isFormValid = _useState18[0],\n    setIsFormValid = _useState18[1];\n  var checkFormValidity = function checkFormValidity() {\n    if (N.trim() !== '' && P.trim() !== '' && K.trim() !== '' && ph.trim() !== '' && humidity.trim() !== '' && temp.trim() !== '' && rainfall.trim() !== '') {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  };\n  var handleSubmit = function handleSubmit() {\n    return (_ref = _ref || (0, _asyncToGenerator2.default)(function* () {\n      if (isFormValid) {\n        try {\n          var response = yield _axios.default.get('http://localhost:5000');\n          setData(response.data);\n        } catch (error) {\n          console.error('Error fetching data  :    ', error);\n        }\n      } else {\n        (0, _reactNative.Alert)('Please fill in all required fields.');\n      }\n    })).apply(this, arguments);\n  };\n  (0, _react.useEffect)(function () {\n    checkFormValidity();\n  }, [N, P, K, humidity, temp, rainfall, ph]);\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: styles.container,\n    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.featuresBox,\n      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.featureText,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.feature,\n          children: \"NPK(Nitrogen, Phosphorus, Potassium) :\"\n        }), \"Represent the concentration of these nutrients in soil.\"]\n      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.featureText,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.feature,\n          children: \"Humidity : \"\n        }), \"Humidity refers to the amount of moisture or water vapor present in the air.\"]\n      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.featureText,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.feature,\n          children: \"Temperature : \"\n        }), \"Temperature indicates the degree of heat in the environment\"]\n      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.featureText,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.feature,\n          children: \"PH Level : \"\n        }), \"PH measures the acidity or alkalinity of soil or water.\"]\n      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.featureText,\n        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.feature,\n          children: \"Rainfall: \"\n        }), \"Rainfall is the amount of precipitation (rain) that occurs in a given area and time.\"]\n      })]\n    }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {\n      children: [(0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Nitrogen Level\",\n        value: N,\n        label: \"Nitrogen(N) (5 - 250)\",\n        minValue: 0,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setN(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Phosphorous Level\",\n        value: P,\n        label: \"Phosphorous(P) (5-250)\",\n        minValue: 0,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setP(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Potassium Level\",\n        value: K,\n        label: \"Potassium(K) (5-250)\",\n        minValue: 5,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setK(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Humidity Level\",\n        value: humidity,\n        label: \"Humidity (10 - 100)\",\n        minValue: 10,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setHumidity(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Temperature (\\xB0C) \",\n        value: temp,\n        label: \"Temperature (5\\xB0C - 60\\xB0C)\",\n        minValue: 5,\n        maxValue: 60,\n        onChange: function onChange(newValue) {\n          return setTemp(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"PH Level \",\n        value: ph,\n        label: \"PH (0-14)\",\n        minValue: 0,\n        maxValue: 14,\n        onChange: function onChange(newValue) {\n          return setPh(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Rainfall (mm)\",\n        value: rainfall,\n        label: \"Rainfall (10mm - 300mm)\",\n        minValue: 10,\n        maxValue: 350,\n        onChange: function onChange(newValue) {\n          return setRainfall(newValue);\n        },\n        checkFormValidity: checkFormValidity\n      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {\n        title: \"Predict Crop\",\n        onPress: handleSubmit,\n        disabled: !isFormValid,\n        style: {\n          marginTop: 10\n        }\n      }), predictedCrop ? (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n        style: styles.result,\n        children: [\"Recommended Crop: \", predictedCrop]\n      }) : null]\n    })]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  featuresBox: {\n    borderWidth: 1,\n    borderRadius: 10,\n    height: 'max-content',\n    marginTop: -10,\n    padding: 5,\n    marginBottom: 7\n  },\n  feature: {\n    fontWeight: '600'\n  },\n  featureText: {\n    fontSize: 12,\n    color: _colors.default.text,\n    fontWeight: '400',\n    marginVertical: 1\n  },\n  heading: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  result: {\n    marginTop: 20,\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});\nvar _default = CropRecommendationScreen;\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_FloatInputWithRange","_interopRequireDefault","_colors","_axios","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CropRecommendationScreen","_ref","_useState","useState","_useState2","_slicedToArray2","N","setN","_useState3","_useState4","P","setP","_useState5","_useState6","K","setK","_useState7","_useState8","humidity","setHumidity","_useState9","_useState10","temp","setTemp","_useState11","_useState12","ph","setPh","_useState13","_useState14","rainfall","setRainfall","_useState15","_useState16","predictedCrop","setPredictedCrop","_useState17","_useState18","isFormValid","setIsFormValid","checkFormValidity","trim","handleSubmit","_asyncToGenerator2","response","axios","setData","data","error","console","Alert","apply","arguments","useEffect","jsxs","View","style","styles","container","children","featuresBox","Text","featureText","jsx","feature","ScrollView","placeholder","value","label","minValue","maxValue","onChange","newValue","Button","title","onPress","disabled","marginTop","result","StyleSheet","create","flex","padding","borderWidth","borderRadius","height","marginBottom","fontWeight","fontSize","color","colors","text","marginVertical","heading","_default","exports"],"sources":["E:/Crop Disease Classifier- Hackaton project/Android App/src/EXPO/Screens/Crop Model Screens/CropRecommend.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, Alert, ScrollView } from 'react-native';\r\n// import AxiosInstance from '../../../AxiosInstance';\r\nimport FloatInputWithRange from '../../Components/FloatInputWithRange';\r\nimport colors from '../../../Constants/colors';\r\nimport axios from 'axios';\r\n\r\n  const CropRecommendationScreen = () => {\r\n\r\n    const [N, setN] = useState('1');\r\n    const [P, setP] = useState('1');\r\n    const [K, setK] = useState('1');\r\n    const [humidity, setHumidity] = useState('1');\r\n    const [temp, setTemp] = useState('1');\r\n    const [ph, setPh] = useState('1');\r\n    const [rainfall, setRainfall] = useState('1');\r\n    \r\n    const [predictedCrop, setPredictedCrop] = useState('');\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n\r\n\r\n    const checkFormValidity = () => {\r\n      if (\r\n        N.trim() !== '' && \r\n        P.trim() !== '' && \r\n        K.trim() !== '' &&\r\n        ph.trim() !== '' &&\r\n        humidity.trim() !== '' &&\r\n        temp.trim() !== '' &&\r\n        rainfall.trim() !== '' \r\n        ) {\r\n        setIsFormValid(true);\r\n      } else {\r\n        setIsFormValid(false);\r\n      }\r\n    };\r\n\r\n    const handleSubmit = async ()=>{\r\n\r\n      if(isFormValid){\r\n\r\n        try {\r\n          const response = await axios.get('http://localhost:5000');\r\n          setData(response.data);\r\n        } catch (error) {\r\n          console.error('Error fetching data  :    ', error);\r\n        }\r\n\r\n    //   const data = {\r\n    //     'N' : N,\r\n    //     'P' :  P,\r\n    //     'K' :  K,\r\n    //     'temperature' : temp ,\r\n    //      'ph' : ph ,\r\n    //      'rainfall' : rainfall,\r\n    //      'humidity' : humidity\r\n    //   }\r\n\r\n    //  await axios.get('http://localhost:5000')\r\n    //   .then(res=>{\r\n    //     console.log('resss , ' , res)\r\n    //     setPredictedCrop(res.data.best_crop)\r\n    //   })\r\n    //   .catch((e)=>{\r\n    //     Alert('error')\r\n    //     console.log(\"eeeeeeeeeeeeeee\" , e)\r\n    //   })\r\n\r\n    }\r\n    else{\r\n      Alert('Please fill in all required fields.')\r\n    }\r\n    }\r\n\r\n    useEffect(()=>{\r\n      checkFormValidity()\r\n    },[N,P,K,humidity,temp , rainfall ,ph])\r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\r\n      {/* <Text style={styles.heading}>Enter Deatils To suggest Best Crop To grow</Text> */}\r\n\r\n      <View style = {styles.featuresBox}>\r\n\r\n        <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>\r\n         NPK(Nitrogen, Phosphorus, Potassium) :\r\n         </Text> \r\n         Represent the concentration of these nutrients in soil. \r\n       </Text>\r\n\r\n        <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Humidity : </Text> \r\n       Humidity refers to the amount of moisture or water vapor present in the air. \r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Temperature : </Text> \r\n       Temperature indicates the degree of heat in the environment\r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>PH Level : </Text> \r\n       PH measures the acidity or alkalinity of soil or water.\r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Rainfall: </Text> \r\n       Rainfall is the amount of precipitation (rain) that occurs in a given area and time.\r\n       </Text>\r\n\r\n      </View>\r\n\r\n    <ScrollView>\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Nitrogen Level\"\r\n        value={N}\r\n        label=\"Nitrogen(N) (5 - 250)\"\r\n        minValue={0}\r\n        maxValue={250}\r\n        onChange={(newValue) => setN(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n      <FloatInputWithRange\r\n        placeholder=\"Phosphorous Level\"\r\n        value={P}\r\n        label=\"Phosphorous(P) (5-250)\"\r\n        minValue={0}\r\n        maxValue={250}\r\n        onChange={(newValue) => setP(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n      <FloatInputWithRange\r\n        placeholder=\"Potassium Level\"\r\n        value={K}\r\n        label=\"Potassium(K) (5-250)\"\r\n        minValue={5}\r\n        maxValue={250}\r\n        onChange={(newValue) => setK(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Humidity Level\"\r\n        value={humidity}\r\n        label=\"Humidity (10 - 100)\"\r\n        minValue={10}\r\n        maxValue={250}\r\n        onChange={(newValue) => setHumidity(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Temperature (°C) \"\r\n        value={temp}\r\n        label=\"Temperature (5°C - 60°C)\"\r\n        minValue={5}\r\n        maxValue={60}\r\n        onChange={(newValue) => setTemp(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"PH Level \"\r\n        value={ph}\r\n        label=\"PH (0-14)\"\r\n        minValue={0}\r\n        maxValue={14}\r\n        onChange={(newValue) => setPh(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Rainfall (mm)\"\r\n        value={rainfall}\r\n        label=\"Rainfall (10mm - 300mm)\"\r\n        minValue={10}\r\n        maxValue={350}\r\n        onChange={(newValue) => setRainfall(newValue)}\r\n      checkFormValidity = {checkFormValidity}\r\n\r\n      />\r\n\r\n      <Button \r\n      title=\"Predict Crop\" \r\n      onPress={handleSubmit} \r\n      disabled={!isFormValid}\r\nstyle = {{marginTop : 10}}      \r\n      />\r\n\r\n\r\n      {predictedCrop ? (\r\n        <Text style={styles.result}>Recommended Crop: {predictedCrop}</Text>\r\n      ) : null}\r\n</ScrollView>\r\n\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  featuresBox :{\r\n    borderWidth : 1 , \r\n    borderRadius : 10 ,\r\n    height : 'max-content',\r\n    marginTop:-10 ,\r\n    padding : 5,\r\n    marginBottom : 7 \r\n  },\r\n  feature:{\r\n    fontWeight: '600',\r\n  },\r\n  featureText :{\r\n    fontSize :12 , \r\n    color : colors.text,\r\n    fontWeight: '400',\r\n    marginVertical : 1\r\n  },\r\n  heading: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n  result: {\r\n    marginTop: 20,\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n  \r\n})\r\n\r\n\r\nexport default CropRecommendationScreen;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}