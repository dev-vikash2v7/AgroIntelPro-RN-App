{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _CircularBuffer = _interopRequireDefault(require(\"./CircularBuffer\"));\nvar _LeastSquareSolver = _interopRequireDefault(require(\"./LeastSquareSolver\"));\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar VelocityTracker = function () {\n  function VelocityTracker() {\n    (0, _classCallCheck2.default)(this, VelocityTracker);\n    _defineProperty(this, \"assumePointerMoveStoppedMilliseconds\", 40);\n    _defineProperty(this, \"historySize\", 20);\n    _defineProperty(this, \"horizonMilliseconds\", 300);\n    _defineProperty(this, \"minSampleSize\", 3);\n    _defineProperty(this, \"samples\", void 0);\n    this.samples = new _CircularBuffer.default(this.historySize);\n  }\n  (0, _createClass2.default)(VelocityTracker, [{\n    key: \"add\",\n    value: function add(event) {\n      this.samples.push(event);\n    }\n  }, {\n    key: \"getVelocityEstimate\",\n    value: function getVelocityEstimate() {\n      var x = [];\n      var y = [];\n      var w = [];\n      var time = [];\n      var sampleCount = 0;\n      var index = this.samples.size - 1;\n      var newestSample = this.samples.get(index);\n      if (!newestSample) {\n        return null;\n      }\n      var previousSample = newestSample;\n      while (sampleCount < this.samples.size) {\n        var sample = this.samples.get(index);\n        var age = newestSample.time - sample.time;\n        var delta = Math.abs(sample.time - previousSample.time);\n        previousSample = sample;\n        if (age > this.horizonMilliseconds || delta > this.assumePointerMoveStoppedMilliseconds) {\n          break;\n        }\n        x.push(sample.x);\n        y.push(sample.y);\n        w.push(1);\n        time.push(-age);\n        sampleCount++;\n        index--;\n      }\n      if (sampleCount >= this.minSampleSize) {\n        var xSolver = new _LeastSquareSolver.default(time, x, w);\n        var xFit = xSolver.solve(2);\n        if (xFit !== null) {\n          var ySolver = new _LeastSquareSolver.default(time, y, w);\n          var yFit = ySolver.solve(2);\n          if (yFit !== null) {\n            var xVelocity = xFit.coefficients[1] * 1000;\n            var yVelocity = yFit.coefficients[1] * 1000;\n            return [xVelocity, yVelocity];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      var estimate = this.getVelocityEstimate();\n      if (estimate !== null) {\n        return estimate;\n      }\n      return [0, 0];\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.samples.clear();\n    }\n  }]);\n  return VelocityTracker;\n}();\nexports.default = VelocityTracker;","map":{"version":3,"names":["_CircularBuffer","_interopRequireDefault","require","_LeastSquareSolver","VelocityTracker","_classCallCheck2","default","_defineProperty","samples","CircularBuffer","historySize","_createClass2","key","value","add","event","push","getVelocityEstimate","x","y","w","time","sampleCount","index","size","newestSample","get","previousSample","sample","age","delta","Math","abs","horizonMilliseconds","assumePointerMoveStoppedMilliseconds","minSampleSize","xSolver","LeastSquareSolver","xFit","solve","ySolver","yFit","xVelocity","coefficients","yVelocity","getVelocity","estimate","reset","clear","exports"],"sources":["D:\\vikash\\AgroIntelPro-RN-App\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\VelocityTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport CircularBuffer from './CircularBuffer';\nimport LeastSquareSolver from './LeastSquareSolver';\n\nexport default class VelocityTracker {\n  private assumePointerMoveStoppedMilliseconds = 40;\n  private historySize = 20;\n  private horizonMilliseconds = 300;\n  private minSampleSize = 3;\n\n  private samples: CircularBuffer<AdaptedEvent>;\n\n  constructor() {\n    this.samples = new CircularBuffer<AdaptedEvent>(this.historySize);\n  }\n\n  public add(event: AdaptedEvent): void {\n    this.samples.push(event);\n  }\n\n  /// Returns an estimate of the velocity of the object being tracked by the\n  /// tracker given the current information available to the tracker.\n  ///\n  /// Information is added using [addPosition].\n  ///\n  /// Returns null if there is no data on which to base an estimate.\n  private getVelocityEstimate(): [number, number] | null {\n    const x = [];\n    const y = [];\n    const w = [];\n    const time = [];\n\n    let sampleCount = 0;\n    let index = this.samples.size - 1;\n    const newestSample = this.samples.get(index);\n    if (!newestSample) {\n      return null;\n    }\n\n    let previousSample = newestSample;\n\n    // Starting with the most recent PointAtTime sample, iterate backwards while\n    // the samples represent continuous motion.\n    while (sampleCount < this.samples.size) {\n      const sample = this.samples.get(index);\n\n      const age = newestSample.time - sample.time;\n      const delta = Math.abs(sample.time - previousSample.time);\n      previousSample = sample;\n\n      if (\n        age > this.horizonMilliseconds ||\n        delta > this.assumePointerMoveStoppedMilliseconds\n      ) {\n        break;\n      }\n\n      x.push(sample.x);\n      y.push(sample.y);\n      w.push(1);\n      time.push(-age);\n\n      sampleCount++;\n      index--;\n    }\n\n    if (sampleCount >= this.minSampleSize) {\n      const xSolver = new LeastSquareSolver(time, x, w);\n      const xFit = xSolver.solve(2);\n\n      if (xFit !== null) {\n        const ySolver = new LeastSquareSolver(time, y, w);\n        const yFit = ySolver.solve(2);\n\n        if (yFit !== null) {\n          const xVelocity = xFit.coefficients[1] * 1000;\n          const yVelocity = yFit.coefficients[1] * 1000;\n\n          return [xVelocity, yVelocity];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getVelocity(): [number, number] {\n    const estimate = this.getVelocityEstimate();\n    if (estimate !== null) {\n      return estimate;\n    }\n    return [0, 0];\n  }\n\n  public reset(): void {\n    this.samples.clear();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}