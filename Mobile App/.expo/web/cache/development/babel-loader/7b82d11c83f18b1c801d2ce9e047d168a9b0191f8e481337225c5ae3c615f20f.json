{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _AxiosInstance = _interopRequireDefault(require(\"../../../AxiosInstance\"));\nvar _FloatInputWithRange = _interopRequireDefault(require(\"../../Components/FloatInputWithRange\"));\nvar _colors = _interopRequireDefault(require(\"../../../Constants/colors\"));\nvar _CropData = _interopRequireDefault(require(\"../../../Constants/CropData\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"D:\\\\vikash\\\\AgroIntelPro-RN-App\\\\src\\\\EXPO\\\\Screens\\\\Crop Model Screens\\\\CropRecommend.js\";\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar CropRecommendationScreen = function CropRecommendationScreen() {\n  var _useState = (0, _react.useState)(''),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    N = _useState2[0],\n    setN = _useState2[1];\n  var _useState3 = (0, _react.useState)(''),\n    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n    P = _useState4[0],\n    setP = _useState4[1];\n  var _useState5 = (0, _react.useState)(''),\n    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n    K = _useState6[0],\n    setK = _useState6[1];\n  var _useState7 = (0, _react.useState)(''),\n    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),\n    humidity = _useState8[0],\n    setHumidity = _useState8[1];\n  var _useState9 = (0, _react.useState)(''),\n    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),\n    temp = _useState10[0],\n    setTemp = _useState10[1];\n  var _useState11 = (0, _react.useState)(''),\n    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),\n    ph = _useState12[0],\n    setPh = _useState12[1];\n  var _useState13 = (0, _react.useState)(''),\n    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),\n    rainfall = _useState14[0],\n    setRainfall = _useState14[1];\n  var _useState15 = (0, _react.useState)(''),\n    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),\n    cropData = _useState16[0],\n    setCropData = _useState16[1];\n  var _useState17 = (0, _react.useState)(false),\n    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),\n    isFormValid = _useState18[0],\n    setIsFormValid = _useState18[1];\n  var _useState19 = (0, _react.useState)(false),\n    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),\n    isLoading = _useState20[0],\n    setIsLoading = _useState20[1];\n  var checkFormValidity = function checkFormValidity() {\n    if (N.trim() !== '' && P.trim() !== '' && K.trim() !== '' && ph.trim() !== '' && humidity.trim() !== '' && temp.trim() !== '' && rainfall.trim() !== '') {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  };\n  var handleSubmit = function handleSubmit() {\n    if (isFormValid) {\n      setIsLoading(true);\n      var data = {\n        'N': parseFloat(N),\n        'P': parseFloat(P),\n        'K': parseFloat(K),\n        'temperature': parseFloat(temp),\n        'humidity': parseFloat(humidity),\n        'ph': parseFloat(ph),\n        'rainfall': parseFloat(rainfall)\n      };\n      _CropData.default.forEach(function (crop_obj) {\n        if (crop_obj.name == 'rice') {\n          setCropData(crop_obj);\n          return;\n        }\n      });\n      setIsLoading(false);\n    } else {\n      (0, _reactNative.Alert)('Please fill in all required fields.');\n    }\n  };\n  (0, _react.useEffect)(function () {\n    checkFormValidity();\n  }, [N, P, K, humidity, temp, rainfall, ph]);\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: styles.container,\n    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: styles.heading,\n      children: \"Enter Deatils To Suggest Best Crop :\"\n    }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {\n      children: [(0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Nitrogen Level\",\n        value: N,\n        label: \"Nitrogen(N) (5 - 250)\",\n        minValue: 0,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setN(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Phosphorous Level\",\n        value: P,\n        label: \"Phosphorous(P) (5-250)\",\n        minValue: 0,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setP(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Potassium Level\",\n        value: K,\n        label: \"Potassium(K) (5-250)\",\n        minValue: 5,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setK(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Humidity Level\",\n        value: humidity,\n        label: \"Humidity (10 - 100)\",\n        minValue: 10,\n        maxValue: 250,\n        onChange: function onChange(newValue) {\n          return setHumidity(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Temperature (\\xB0C) \",\n        value: temp,\n        label: \"Temperature (5\\xB0C - 60\\xB0C)\",\n        minValue: 5,\n        maxValue: 60,\n        onChange: function onChange(newValue) {\n          return setTemp(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"PH Level \",\n        value: ph,\n        label: \"PH (0-14)\",\n        minValue: 0,\n        maxValue: 14,\n        onChange: function onChange(newValue) {\n          return setPh(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_FloatInputWithRange.default, {\n        placeholder: \"Rainfall (mm)\",\n        value: rainfall,\n        label: \"Rainfall (10mm - 300mm)\",\n        minValue: 10,\n        maxValue: 350,\n        onChange: function onChange(newValue) {\n          return setRainfall(newValue);\n        }\n      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {\n        title: \"Predict Crop\",\n        onPress: handleSubmit,\n        disabled: !isFormValid,\n        style: {\n          marginTop: 20\n        }\n      }), isLoading && (0, _jsxRuntime.jsx)(ActivityIndicator, {\n        size: \"large\",\n        color: \"#007BFF\"\n      }), cropData && (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: styles.cropView,\n        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {\n          style: styles.crop_text,\n          children: [\"Recommended Crop: \", cropData.best_crop]\n        }), (0, _jsxRuntime.jsx)(Image, {\n          source: cropData.crop_img,\n          style: styles.crop_img,\n          resizeMode: \"cover\"\n        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n          children: [\" Description : \", cropData.describe, \" \"]\n        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n          children: [\" Best Weather and Soil : \", cropData.condition, \" \"]\n        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {\n          children: [\" Harvesting Cycle : \", cropData.duration, \" \"]\n        })]\n      })]\n    })]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20\n  },\n  featuresBox: {\n    borderWidth: 1,\n    borderRadius: 10,\n    height: 'max-content',\n    marginTop: -10,\n    padding: 5,\n    marginBottom: 7\n  },\n  feature: {\n    fontWeight: '600'\n  },\n  featureText: {\n    fontSize: 12,\n    color: _colors.default.text,\n    fontWeight: '400',\n    marginVertical: 1\n  },\n  heading: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    marginBottom: 5,\n    textDecorationLine: 'underline'\n  },\n  result: {\n    marginTop: 20,\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  crop_img: {\n    width: 100,\n    height: 100\n  }\n});\nvar _default = CropRecommendationScreen;\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_AxiosInstance","_interopRequireDefault","_FloatInputWithRange","_colors","_CropData","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CropRecommendationScreen","_useState","useState","_useState2","_slicedToArray2","N","setN","_useState3","_useState4","P","setP","_useState5","_useState6","K","setK","_useState7","_useState8","humidity","setHumidity","_useState9","_useState10","temp","setTemp","_useState11","_useState12","ph","setPh","_useState13","_useState14","rainfall","setRainfall","_useState15","_useState16","cropData","setCropData","_useState17","_useState18","isFormValid","setIsFormValid","_useState19","_useState20","isLoading","setIsLoading","checkFormValidity","trim","handleSubmit","data","parseFloat","CropDataArr","forEach","crop_obj","name","Alert","useEffect","jsxs","View","style","styles","container","children","jsx","Text","heading","ScrollView","placeholder","value","label","minValue","maxValue","onChange","newValue","Button","title","onPress","disabled","marginTop","ActivityIndicator","size","color","cropView","crop_text","best_crop","Image","source","crop_img","resizeMode","describe","condition","duration","StyleSheet","create","flex","padding","featuresBox","borderWidth","borderRadius","height","marginBottom","feature","fontWeight","featureText","fontSize","colors","text","marginVertical","textDecorationLine","result","width","_default","exports"],"sources":["D:/vikash/AgroIntelPro-RN-App/src/EXPO/Screens/Crop Model Screens/CropRecommend.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, Alert, ScrollView } from 'react-native';\r\nimport AxiosInstance from '../../../AxiosInstance';\r\nimport FloatInputWithRange from '../../Components/FloatInputWithRange';\r\nimport colors from '../../../Constants/colors';\r\n\r\nimport CropDataArr from '../../../Constants/CropData';\r\n\r\n\r\n\r\n\r\n  const CropRecommendationScreen = () => {\r\n\r\n    const [N, setN] = useState('');\r\n    const [P, setP] = useState('');\r\n    const [K, setK] = useState('');\r\n    const [humidity, setHumidity] = useState('');\r\n    const [temp, setTemp] = useState('');\r\n    const [ph, setPh] = useState('');\r\n    const [rainfall, setRainfall] = useState('');\r\n    \r\n    const [cropData, setCropData] = useState('');\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    \r\n\r\n\r\n    const checkFormValidity = () => {\r\n      if (\r\n        N.trim() !== '' && \r\n        P.trim() !== '' && \r\n        K.trim() !== '' &&\r\n        ph.trim() !== '' &&\r\n        humidity.trim() !== '' &&\r\n        temp.trim() !== '' &&\r\n        rainfall.trim() !== '' \r\n        ) {\r\n        setIsFormValid(true);\r\n      } else {\r\n        setIsFormValid(false);\r\n      }\r\n    };\r\n\r\n    const handleSubmit =  ()=>{\r\n\r\n      if(isFormValid){\r\n\r\n        setIsLoading(true)\r\n\r\n      const data = {\r\n        'N' : parseFloat(N),\r\n        'P' : parseFloat(P),\r\n        'K' : parseFloat(K),\r\n        'temperature' : parseFloat(temp) ,\r\n        'humidity' : parseFloat(humidity),\r\n         'ph' : parseFloat(ph) ,\r\n         'rainfall' : parseFloat(rainfall),\r\n      }\r\n\r\n      CropDataArr.forEach((crop_obj)=>{\r\n            if(crop_obj.name == 'rice'){\r\n              setCropData(crop_obj);\r\n              return;\r\n            }\r\n          })\r\n\r\n\r\n      // AxiosInstance.post('/api/crop_recommend' , data)\r\n      // .then((res)=>{\r\n      //   console.log('resss , ' , res.data)\r\n\r\n      //   CropDataArr.forEach((crop_obj)=>{\r\n      //     if(crop_obj.name == 'rice'){\r\n      //       setCropData(crop_obj);\r\n      //       return;\r\n      //     }\r\n      //   })\r\n      // })\r\n      // .catch((e)=>{\r\n      //   Alert('error')\r\n      //   console.log(\"eeeeeeeeeeeeeee\" , e)\r\n      // })\r\n\r\n      setIsLoading(false)\r\n\r\n    }\r\n    else{\r\n      Alert('Please fill in all required fields.')\r\n    }\r\n    }\r\n\r\n    useEffect(()=>{\r\n      checkFormValidity()\r\n    },[N,P,K,humidity,temp , rainfall ,ph])\r\n  \r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\r\n      <Text style={styles.heading}>Enter Deatils To Suggest Best Crop :</Text>\r\n\r\n      {/* <View style = {styles.featuresBox}>\r\n\r\n        <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>\r\n         NPK(Nitrogen, Phosphorus, Potassium) :\r\n         </Text> \r\n         Represent the concentration of these nutrients in soil. \r\n       </Text>\r\n\r\n        <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Humidity : </Text> \r\n       Humidity refers to the amount of moisture or water vapor present in the air. \r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Temperature : </Text> \r\n       Temperature indicates the degree of heat in the environment\r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>PH Level : </Text> \r\n       PH measures the acidity or alkalinity of soil or water.\r\n       </Text>\r\n\r\n       <Text style = {styles.featureText}>\r\n       <Text style = {styles.feature}>Rainfall: </Text> \r\n       Rainfall is the amount of precipitation (rain) that occurs in a given area and time.\r\n       </Text>\r\n      </View> */}\r\n\r\n    <ScrollView>\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Nitrogen Level\"\r\n        value={N}\r\n        label=\"Nitrogen(N) (5 - 250)\"\r\n        minValue={0}\r\n        maxValue={250}\r\n        onChange={(newValue) => setN(newValue)}\r\n\r\n      />\r\n      <FloatInputWithRange\r\n        placeholder=\"Phosphorous Level\"\r\n        value={P}\r\n        label=\"Phosphorous(P) (5-250)\"\r\n        minValue={0}\r\n        maxValue={250}\r\n        onChange={(newValue) => setP(newValue)}\r\n\r\n      />\r\n      <FloatInputWithRange\r\n        placeholder=\"Potassium Level\"\r\n        value={K}\r\n        label=\"Potassium(K) (5-250)\"\r\n        minValue={5}\r\n        maxValue={250}\r\n        onChange={(newValue) => setK(newValue)}\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Humidity Level\"\r\n        value={humidity}\r\n        label=\"Humidity (10 - 100)\"\r\n        minValue={10}\r\n        maxValue={250}\r\n        onChange={(newValue) => setHumidity(newValue)}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Temperature (°C) \"\r\n        value={temp}\r\n        label=\"Temperature (5°C - 60°C)\"\r\n        minValue={5}\r\n        maxValue={60}\r\n        onChange={(newValue) => setTemp(newValue)}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"PH Level \"\r\n        value={ph}\r\n        label=\"PH (0-14)\"\r\n        minValue={0}\r\n        maxValue={14}\r\n        onChange={(newValue) => setPh(newValue)}\r\n\r\n      />\r\n\r\n      <FloatInputWithRange\r\n        placeholder=\"Rainfall (mm)\"\r\n        value={rainfall}\r\n        label=\"Rainfall (10mm - 300mm)\"\r\n        minValue={10}\r\n        maxValue={350}\r\n        onChange={(newValue) => setRainfall(newValue)}\r\n\r\n      />\r\n\r\n      <Button \r\n      title=\"Predict Crop\" \r\n      onPress={handleSubmit} \r\n      disabled={!isFormValid}\r\nstyle = {{marginTop : 20}}      \r\n      />\r\n\r\n      {\r\n        isLoading &&\r\n        <ActivityIndicator size=\"large\" color=\"#007BFF\" />\r\n      }\r\n      {cropData && (\r\n        <View style = {styles.cropView}>\r\n\r\n            <Text style={styles.crop_text}>Recommended Crop: {cropData.best_crop}</Text>\r\n\r\n            <Image source={ cropData.crop_img  } style ={ styles.crop_img} resizeMode = 'cover'/>\r\n            \r\n            <Text> Description : {cropData.describe} </Text>\r\n            <Text> Best Weather and Soil : {cropData.condition} </Text>\r\n            <Text> Harvesting Cycle : {cropData.duration} </Text>\r\n\r\n        </View>\r\n\r\n      ) }\r\n</ScrollView>\r\n\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 20,\r\n  },\r\n  featuresBox :{\r\n    borderWidth : 1 , \r\n    borderRadius : 10 ,\r\n    height : 'max-content',\r\n    marginTop:-10 ,\r\n    padding : 5,\r\n    marginBottom : 7 \r\n  },\r\n  feature:{\r\n    fontWeight: '600',\r\n  },\r\n  featureText :{\r\n    fontSize :12 , \r\n    color : colors.text,\r\n    fontWeight: '400',\r\n    marginVertical : 1\r\n  },\r\n  heading: {\r\n    fontSize: 15,\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n    textDecorationLine : 'underline'\r\n  },\r\n  result: {\r\n    marginTop: 20,\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n  },\r\n\r\n\r\n  crop_img:{\r\n    width:100,\r\n    height : 100 ,\r\n\r\n  }\r\n  \r\n})\r\n\r\n\r\nexport default CropRecommendationScreen;"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,oBAAA,GAAAD,sBAAA,CAAAH,OAAA;AACA,IAAAK,OAAA,GAAAF,sBAAA,CAAAH,OAAA;AAEA,IAAAM,SAAA,GAAAH,sBAAA,CAAAH,OAAA;AAAsD,IAAAO,WAAA,GAAAP,OAAA;AAAA,IAAAQ,KAAA;EAAAC,YAAA;AAAA,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAZ,wBAAAgB,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAKpD,IAAMW,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAA,EAAS;EAErC,IAAAC,SAAA,GAAkB,IAAAC,eAAQ,EAAC,EAAE,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAnB,OAAA,EAAAgB,SAAA;IAAvBI,CAAC,GAAAF,UAAA;IAAEG,IAAI,GAAAH,UAAA;EACd,IAAAI,UAAA,GAAkB,IAAAL,eAAQ,EAAC,EAAE,CAAC;IAAAM,UAAA,OAAAJ,eAAA,CAAAnB,OAAA,EAAAsB,UAAA;IAAvBE,CAAC,GAAAD,UAAA;IAAEE,IAAI,GAAAF,UAAA;EACd,IAAAG,UAAA,GAAkB,IAAAT,eAAQ,EAAC,EAAE,CAAC;IAAAU,UAAA,OAAAR,eAAA,CAAAnB,OAAA,EAAA0B,UAAA;IAAvBE,CAAC,GAAAD,UAAA;IAAEE,IAAI,GAAAF,UAAA;EACd,IAAAG,UAAA,GAAgC,IAAAb,eAAQ,EAAC,EAAE,CAAC;IAAAc,UAAA,OAAAZ,eAAA,CAAAnB,OAAA,EAAA8B,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAwB,IAAAjB,eAAQ,EAAC,EAAE,CAAC;IAAAkB,WAAA,OAAAhB,eAAA,CAAAnB,OAAA,EAAAkC,UAAA;IAA7BE,IAAI,GAAAD,WAAA;IAAEE,OAAO,GAAAF,WAAA;EACpB,IAAAG,WAAA,GAAoB,IAAArB,eAAQ,EAAC,EAAE,CAAC;IAAAsB,WAAA,OAAApB,eAAA,CAAAnB,OAAA,EAAAsC,WAAA;IAAzBE,EAAE,GAAAD,WAAA;IAAEE,KAAK,GAAAF,WAAA;EAChB,IAAAG,WAAA,GAAgC,IAAAzB,eAAQ,EAAC,EAAE,CAAC;IAAA0B,WAAA,OAAAxB,eAAA,CAAAnB,OAAA,EAAA0C,WAAA;IAArCE,QAAQ,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;EAE5B,IAAAG,WAAA,GAAgC,IAAA7B,eAAQ,EAAC,EAAE,CAAC;IAAA8B,WAAA,OAAA5B,eAAA,CAAAnB,OAAA,EAAA8C,WAAA;IAArCE,QAAQ,GAAAD,WAAA;IAAEE,WAAW,GAAAF,WAAA;EAC5B,IAAAG,WAAA,GAAsC,IAAAjC,eAAQ,EAAC,KAAK,CAAC;IAAAkC,WAAA,OAAAhC,eAAA,CAAAnB,OAAA,EAAAkD,WAAA;IAA9CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAAkC,IAAArC,eAAQ,EAAC,KAAK,CAAC;IAAAsC,WAAA,OAAApC,eAAA,CAAAnB,OAAA,EAAAsD,WAAA;IAA1CE,SAAS,GAAAD,WAAA;IAAEE,YAAY,GAAAF,WAAA;EAI9B,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;IAC9B,IACEtC,CAAC,CAACuC,IAAI,CAAC,CAAC,KAAK,EAAE,IACfnC,CAAC,CAACmC,IAAI,CAAC,CAAC,KAAK,EAAE,IACf/B,CAAC,CAAC+B,IAAI,CAAC,CAAC,KAAK,EAAE,IACfnB,EAAE,CAACmB,IAAI,CAAC,CAAC,KAAK,EAAE,IAChB3B,QAAQ,CAAC2B,IAAI,CAAC,CAAC,KAAK,EAAE,IACtBvB,IAAI,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,IAClBf,QAAQ,CAACe,IAAI,CAAC,CAAC,KAAK,EAAE,EACpB;MACFN,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,MAAM;MACLA,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,IAAMO,YAAY,GAAI,SAAhBA,YAAYA,CAAA,EAAQ;IAExB,IAAGR,WAAW,EAAC;MAEbK,YAAY,CAAC,IAAI,CAAC;MAEpB,IAAMI,IAAI,GAAG;QACX,GAAG,EAAGC,UAAU,CAAC1C,CAAC,CAAC;QACnB,GAAG,EAAG0C,UAAU,CAACtC,CAAC,CAAC;QACnB,GAAG,EAAGsC,UAAU,CAAClC,CAAC,CAAC;QACnB,aAAa,EAAGkC,UAAU,CAAC1B,IAAI,CAAC;QAChC,UAAU,EAAG0B,UAAU,CAAC9B,QAAQ,CAAC;QAChC,IAAI,EAAG8B,UAAU,CAACtB,EAAE,CAAC;QACrB,UAAU,EAAGsB,UAAU,CAAClB,QAAQ;MACnC,CAAC;MAEDmB,iBAAW,CAACC,OAAO,CAAC,UAACC,QAAQ,EAAG;QAC1B,IAAGA,QAAQ,CAACC,IAAI,IAAI,MAAM,EAAC;UACzBjB,WAAW,CAACgB,QAAQ,CAAC;UACrB;QACF;MACF,CAAC,CAAC;MAmBNR,YAAY,CAAC,KAAK,CAAC;IAErB,CAAC,MACG;MACF,IAAAU,kBAAK,EAAC,qCAAqC,CAAC;IAC9C;EACA,CAAC;EAED,IAAAC,gBAAS,EAAC,YAAI;IACZV,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAC,CAACtC,CAAC,EAACI,CAAC,EAACI,CAAC,EAACI,QAAQ,EAACI,IAAI,EAAGQ,QAAQ,EAAEJ,EAAE,CAAC,CAAC;EAGzC,OACE,IAAAlD,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAAsF,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAE5B,IAAApF,WAAA,CAAAqF,GAAA,EAAC3F,YAAA,CAAA4F,IAAI;MAACL,KAAK,EAAEC,MAAM,CAACK,OAAQ;MAAAH,QAAA,EAAC;IAAoC,CAAM,CAAC,EAgC1E,IAAApF,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAA8F,UAAU;MAAAJ,QAAA,GAET,IAAApF,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAE5D,CAAE;QACT6D,KAAK,EAAC,uBAAuB;QAC7BC,QAAQ,EAAE,CAAE;QACZC,QAAQ,EAAE,GAAI;QACdC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAKhE,IAAI,CAACgE,QAAQ,CAAC;QAAA;MAAC,CAExC,CAAC,EACF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAExD,CAAE;QACTyD,KAAK,EAAC,wBAAwB;QAC9BC,QAAQ,EAAE,CAAE;QACZC,QAAQ,EAAE,GAAI;QACdC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAK5D,IAAI,CAAC4D,QAAQ,CAAC;QAAA;MAAC,CAExC,CAAC,EACF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,iBAAiB;QAC7BC,KAAK,EAAEpD,CAAE;QACTqD,KAAK,EAAC,sBAAsB;QAC5BC,QAAQ,EAAE,CAAE;QACZC,QAAQ,EAAE,GAAI;QACdC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAKxD,IAAI,CAACwD,QAAQ,CAAC;QAAA;MAAC,CACxC,CAAC,EAEF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAEhD,QAAS;QAChBiD,KAAK,EAAC,qBAAqB;QAC3BC,QAAQ,EAAE,EAAG;QACbC,QAAQ,EAAE,GAAI;QACdC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAKpD,WAAW,CAACoD,QAAQ,CAAC;QAAA;MAAC,CAE/C,CAAC,EAEF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,sBAAmB;QAC/BC,KAAK,EAAE5C,IAAK;QACZ6C,KAAK,EAAC,gCAA0B;QAChCC,QAAQ,EAAE,CAAE;QACZC,QAAQ,EAAE,EAAG;QACbC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAKhD,OAAO,CAACgD,QAAQ,CAAC;QAAA;MAAC,CAE3C,CAAC,EAEF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,WAAW;QACvBC,KAAK,EAAExC,EAAG;QACVyC,KAAK,EAAC,WAAW;QACjBC,QAAQ,EAAE,CAAE;QACZC,QAAQ,EAAE,EAAG;QACbC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAK5C,KAAK,CAAC4C,QAAQ,CAAC;QAAA;MAAC,CAEzC,CAAC,EAEF,IAAA/F,WAAA,CAAAqF,GAAA,EAACxF,oBAAA,CAAAa,OAAmB;QAClB+E,WAAW,EAAC,eAAe;QAC3BC,KAAK,EAAEpC,QAAS;QAChBqC,KAAK,EAAC,yBAAyB;QAC/BC,QAAQ,EAAE,EAAG;QACbC,QAAQ,EAAE,GAAI;QACdC,QAAQ,EAAE,SAAAA,SAACC,QAAQ;UAAA,OAAKxC,WAAW,CAACwC,QAAQ,CAAC;QAAA;MAAC,CAE/C,CAAC,EAEF,IAAA/F,WAAA,CAAAqF,GAAA,EAAC3F,YAAA,CAAAsG,MAAM;QACPC,KAAK,EAAC,cAAc;QACpBC,OAAO,EAAE5B,YAAa;QACtB6B,QAAQ,EAAE,CAACrC,WAAY;QAC7BmB,KAAK,EAAI;UAACmB,SAAS,EAAG;QAAE;MAAE,CACnB,CAAC,EAGAlC,SAAS,IACT,IAAAlE,WAAA,CAAAqF,GAAA,EAACgB,iBAAiB;QAACC,IAAI,EAAC,OAAO;QAACC,KAAK,EAAC;MAAS,CAAE,CAAC,EAEnD7C,QAAQ,IACP,IAAA1D,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAAsF,IAAI;QAACC,KAAK,EAAIC,MAAM,CAACsB,QAAS;QAAApB,QAAA,GAE3B,IAAApF,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAA4F,IAAI;UAACL,KAAK,EAAEC,MAAM,CAACuB,SAAU;UAAArB,QAAA,GAAC,oBAAkB,EAAC1B,QAAQ,CAACgD,SAAS;QAAA,CAAO,CAAC,EAE5E,IAAA1G,WAAA,CAAAqF,GAAA,EAACsB,KAAK;UAACC,MAAM,EAAGlD,QAAQ,CAACmD,QAAW;UAAC5B,KAAK,EAAIC,MAAM,CAAC2B,QAAS;UAACC,UAAU,EAAG;QAAO,CAAC,CAAC,EAErF,IAAA9G,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAA4F,IAAI;UAAAF,QAAA,GAAC,iBAAe,EAAC1B,QAAQ,CAACqD,QAAQ,EAAC,GAAC;QAAA,CAAM,CAAC,EAChD,IAAA/G,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAA4F,IAAI;UAAAF,QAAA,GAAC,2BAAyB,EAAC1B,QAAQ,CAACsD,SAAS,EAAC,GAAC;QAAA,CAAM,CAAC,EAC3D,IAAAhH,WAAA,CAAA+E,IAAA,EAACrF,YAAA,CAAA4F,IAAI;UAAAF,QAAA,GAAC,sBAAoB,EAAC1B,QAAQ,CAACuD,QAAQ,EAAC,GAAC;QAAA,CAAM,CAAC;MAAA,CAEnD,CAEP;IAAA,CACK,CAAC;EAAA,CAGH,CAAC;AAEX,CAAC;AAID,IAAM/B,MAAM,GAAGgC,uBAAU,CAACC,MAAM,CAAC;EAC/BhC,SAAS,EAAE;IACTiC,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE;EACX,CAAC;EACDC,WAAW,EAAE;IACXC,WAAW,EAAG,CAAC;IACfC,YAAY,EAAG,EAAE;IACjBC,MAAM,EAAG,aAAa;IACtBrB,SAAS,EAAC,CAAC,EAAE;IACbiB,OAAO,EAAG,CAAC;IACXK,YAAY,EAAG;EACjB,CAAC;EACDC,OAAO,EAAC;IACNC,UAAU,EAAE;EACd,CAAC;EACDC,WAAW,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZvB,KAAK,EAAGwB,eAAM,CAACC,IAAI;IACnBJ,UAAU,EAAE,KAAK;IACjBK,cAAc,EAAG;EACnB,CAAC;EACD1C,OAAO,EAAE;IACPuC,QAAQ,EAAE,EAAE;IACZF,UAAU,EAAE,MAAM;IAClBF,YAAY,EAAE,CAAC;IACfQ,kBAAkB,EAAG;EACvB,CAAC;EACDC,MAAM,EAAE;IACN/B,SAAS,EAAE,EAAE;IACb0B,QAAQ,EAAE,EAAE;IACZF,UAAU,EAAE;EACd,CAAC;EAGDf,QAAQ,EAAC;IACPuB,KAAK,EAAC,GAAG;IACTX,MAAM,EAAG;EAEX;AAEF,CAAC,CAAC;AAAA,IAAAY,QAAA,GAGa5G,wBAAwB;AAAA6G,OAAA,CAAA5H,OAAA,GAAA2H,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}