{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\nvar PixelRatio = function () {\n  function PixelRatio() {\n    (0, _classCallCheck2.default)(this, PixelRatio);\n  }\n  (0, _createClass2.default)(PixelRatio, null, [{\n    key: \"get\",\n    value: function get() {\n      return _Dimensions.default.get('window').scale;\n    }\n  }, {\n    key: \"getFontScale\",\n    value: function getFontScale() {\n      return _Dimensions.default.get('window').fontScale || PixelRatio.get();\n    }\n  }, {\n    key: \"getPixelSizeForLayoutSize\",\n    value: function getPixelSizeForLayoutSize(layoutSize) {\n      return Math.round(layoutSize * PixelRatio.get());\n    }\n  }, {\n    key: \"roundToNearestPixel\",\n    value: function roundToNearestPixel(layoutSize) {\n      var ratio = PixelRatio.get();\n      return Math.round(layoutSize * ratio) / ratio;\n    }\n  }]);\n  return PixelRatio;\n}();\nexports.default = PixelRatio;","map":{"version":3,"names":["_Dimensions","_interopRequireDefault","require","PixelRatio","_classCallCheck2","default","_createClass2","key","value","get","Dimensions","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio","exports"],"sources":["E:/React Native Android Apps/AgrI Intel Pro - Hackaton Project/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport Dimensions from '../Dimensions';\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * No equivalent for Web\n   */\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n}"],"mappings":";;;;;;;AAUA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAuC,IAKlBC,UAAU;EAAA,SAAAA,WAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAF,UAAA;EAAA;EAAA,IAAAG,aAAA,CAAAD,OAAA,EAAAF,UAAA;IAAAI,GAAA;IAAAC,KAAA,EAI7B,SAAAC,IAAA,EAAa;MACX,OAAOC,mBAAU,CAACD,GAAG,CAAC,QAAQ,CAAC,CAACE,KAAK;IACvC;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAKD,SAAAI,aAAA,EAAsB;MACpB,OAAOF,mBAAU,CAACD,GAAG,CAAC,QAAQ,CAAC,CAACI,SAAS,IAAIV,UAAU,CAACM,GAAG,CAAC,CAAC;IAC/D;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAMD,SAAAM,0BAAiCC,UAAU,EAAE;MAC3C,OAAOC,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGZ,UAAU,CAACM,GAAG,CAAC,CAAC,CAAC;IAClD;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAQD,SAAAU,oBAA2BH,UAAU,EAAE;MACrC,IAAII,KAAK,GAAGhB,UAAU,CAACM,GAAG,CAAC,CAAC;MAC5B,OAAOO,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGI,KAAK,CAAC,GAAGA,KAAK;IAC/C;EAAC;EAAA,OAAAhB,UAAA;AAAA;AAAAiB,OAAA,CAAAf,OAAA,GAAAF,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}