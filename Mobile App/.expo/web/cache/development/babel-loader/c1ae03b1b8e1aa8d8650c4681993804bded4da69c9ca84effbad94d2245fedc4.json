{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dispatchCommand = dispatchCommand;\nexports.getTag = getTag;\nexports.scrollTo = exports.measure = void 0;\nexports.setGestureState = setGestureState;\nvar _reactNative = require(\"react-native\");\nvar _PlatformChecker = require(\"./PlatformChecker\");\nfunction getTag(view) {\n  return (0, _reactNative.findNodeHandle)(view);\n}\nvar isNative = !(0, _PlatformChecker.shouldBeUseWeb)();\nvar measure;\nexports.measure = measure;\nif ((0, _PlatformChecker.isWeb)()) {\n  exports.measure = measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if ((0, _PlatformChecker.isChromeDebugger)()) {\n  exports.measure = measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  exports.measure = measure = function measure(animatedRef) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return null;\n    }\n    var viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n      return null;\n    }\n    var measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\nfunction dispatchCommand(animatedRef, commandName, args) {\n  'worklet';\n\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n  var shadowNodeWrapper = animatedRef();\n  _dispatchCommand(shadowNodeWrapper, commandName, args);\n}\nvar scrollTo;\nexports.scrollTo = scrollTo;\nif ((0, _PlatformChecker.isWeb)()) {\n  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    var element = animatedRef();\n    element.scrollTo({\n      x: x,\n      y: y,\n      animated: animated\n    });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  exports.scrollTo = scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\nfunction setGestureState(handlerTag, newState) {\n  'worklet';\n\n  if (!_WORKLET || !isNative) {\n    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}","map":{"version":3,"names":["_reactNative","require","_PlatformChecker","getTag","view","findNodeHandle","isNative","shouldBeUseWeb","measure","exports","isWeb","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","isChromeDebugger","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","dispatchCommand","commandName","args","shadowNodeWrapper","_dispatchCommand","scrollTo","animated","global","_IS_FABRIC","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["D:\\vikash\\AgroIntelPro-RN-App\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\NativeMethods.ts"],"sourcesContent":["/* global _WORKLET _measure _scrollTo _dispatchCommand _setGestureState */\nimport { Component } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { MeasuredDimensions, ShadowNodeWrapper } from './commonTypes';\nimport { RefObjectFunction } from './hook/commonTypes';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\n\nexport function getTag(\n  view: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number {\n  return findNodeHandle(view);\n}\n\nconst isNative = !shouldBeUseWeb();\n\nexport let measure: (\n  animatedRef: RefObjectFunction<Component>\n) => MeasuredDimensions | null;\n\nif (isWeb()) {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    const element = animatedRef() as unknown as HTMLElement; // TODO: fix typing of animated refs on web\n    const viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top,\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = (_animatedRef: RefObjectFunction<Component>) => {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    'worklet';\n    if (!_WORKLET) {\n      return null;\n    }\n\n    const viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    }\n\n    const measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`\n      );\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`\n      );\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\n\nexport function dispatchCommand(\n  animatedRef: RefObjectFunction<Component>,\n  commandName: string,\n  args: Array<unknown>\n): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n\n  // dispatchCommand works only on Fabric where animatedRef returns\n  // an object (ShadowNodeWrapper) and not a number\n  const shadowNodeWrapper = animatedRef() as ShadowNodeWrapper;\n  _dispatchCommand!(shadowNodeWrapper, commandName, args);\n}\n\nexport let scrollTo: (\n  animatedRef: RefObjectFunction<Component>,\n  x: number,\n  y: number,\n  animated: boolean\n) => void;\n\nif (isWeb()) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    const element = animatedRef() as unknown as HTMLElement;\n    // @ts-ignore same call as in react-native-web\n    element.scrollTo({ x, y, animated });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    // Calling animatedRef on Paper returns a number (nativeTag)\n    const viewTag = animatedRef() as number;\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = (\n    _animatedRef: RefObjectFunction<Component>,\n    _x: number,\n    _y: number\n  ) => {\n    // no-op\n  };\n}\n\nexport function setGestureState(handlerTag: number, newState: number): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    console.warn(\n      '[Reanimated] You can not use setGestureState in non-worklet function.'\n    );\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}