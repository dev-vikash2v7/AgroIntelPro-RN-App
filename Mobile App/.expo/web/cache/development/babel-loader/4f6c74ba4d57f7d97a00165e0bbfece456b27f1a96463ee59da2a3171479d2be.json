{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoggerProvider = LoggerProvider;\nexports.useLogger = useLogger;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _func = require(\"../utils/func\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"E:\\\\Crop Disease Classifier- Hackaton project\\\\Android App\\\\node_modules\\\\react-native-toast-message\\\\lib\\\\src\\\\contexts\\\\LoggerContext.js\";\nvar LoggerContext = _react.default.createContext({\n  log: _func.noop\n});\nfunction LoggerProvider(_ref) {\n  var children = _ref.children,\n    _ref$enableLogs = _ref.enableLogs,\n    enableLogs = _ref$enableLogs === void 0 ? false : _ref$enableLogs;\n  var log = _react.default.useCallback(function () {\n    if (enableLogs) {\n      var _console;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_console = console).log.apply(_console, ['Toast:'].concat(args));\n    }\n  }, [enableLogs]);\n  var value = {\n    log: log\n  };\n  return (0, _jsxRuntime.jsx)(LoggerContext.Provider, {\n    value: value,\n    children: children\n  });\n}\nfunction useLogger() {\n  var ctx = _react.default.useContext(LoggerContext);\n  return ctx;\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","_func","_jsxRuntime","_jsxFileName","LoggerContext","React","createContext","log","noop","LoggerProvider","_ref","children","_ref$enableLogs","enableLogs","useCallback","_console","_len","arguments","length","args","Array","_key","console","apply","concat","value","jsx","Provider","useLogger","ctx","useContext"],"sources":["E:/Crop Disease Classifier- Hackaton project/Android App/node_modules/react-native-toast-message/lib/src/contexts/LoggerContext.js"],"sourcesContent":["import React from 'react';\nimport { noop } from '../utils/func';\nconst LoggerContext = React.createContext({\n    log: noop\n});\nfunction LoggerProvider({ children, enableLogs = false }) {\n    const log = React.useCallback((...args) => {\n        if (enableLogs) {\n            // eslint-disable-next-line no-console\n            console.log('Toast:', ...args);\n        }\n    }, [enableLogs]);\n    const value = {\n        log\n    };\n    return (<LoggerContext.Provider value={value}>{children}</LoggerContext.Provider>);\n}\nfunction useLogger() {\n    const ctx = React.useContext(LoggerContext);\n    return ctx;\n}\nexport { LoggerProvider, useLogger };\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AAAqC,IAAAE,WAAA,GAAAF,OAAA;AAAA,IAAAG,YAAA;AACrC,IAAMC,aAAa,GAAGC,cAAK,CAACC,aAAa,CAAC;EACtCC,GAAG,EAAEC;AACT,CAAC,CAAC;AACF,SAASC,cAAcA,CAAAC,IAAA,EAAmC;EAAA,IAAhCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAAC,eAAA,GAAAF,IAAA,CAAEG,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;EAClD,IAAML,GAAG,GAAGF,cAAK,CAACS,WAAW,CAAC,YAAa;IACvC,IAAID,UAAU,EAAE;MAAA,IAAAE,QAAA;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADcC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAG9B,CAAAN,QAAA,GAAAO,OAAO,EAACf,GAAG,CAAAgB,KAAA,CAAAR,QAAA,GAAC,QAAQ,EAAAS,MAAA,CAAKL,IAAI,EAAC;IAClC;EACJ,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAChB,IAAMY,KAAK,GAAG;IACVlB,GAAG,EAAHA;EACJ,CAAC;EACD,OAAQ,IAAAL,WAAA,CAAAwB,GAAA,EAACtB,aAAa,CAACuB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAd,QAAA,EAAEA;EAAQ,CAAyB,CAAC;AACrF;AACA,SAASiB,SAASA,CAAA,EAAG;EACjB,IAAMC,GAAG,GAAGxB,cAAK,CAACyB,UAAU,CAAC1B,aAAa,CAAC;EAC3C,OAAOyB,GAAG;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}