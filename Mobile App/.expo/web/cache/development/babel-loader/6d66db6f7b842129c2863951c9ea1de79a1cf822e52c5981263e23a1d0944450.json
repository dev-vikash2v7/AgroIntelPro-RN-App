{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar ImagePicker = _interopRequireWildcard(require(\"expo-image-picker\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _this = this,\n  _jsxFileName = \"E:\\\\Crop Disease Classifier- Hackaton project\\\\Android App\\\\src\\\\EXPO\\\\Screens\\\\Crop Model Screens\\\\DiseasePrediction.js\";\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar CropDiseasePredictionScreen = function CropDiseasePredictionScreen() {\n  var _ref;\n  var _useState = (0, _react.useState)(null),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    selectedImage = _useState2[0],\n    setSelectedImage = _useState2[1];\n  var handleGalleryPress = function handleGalleryPress() {\n    return (_ref = _ref || (0, _asyncToGenerator2.default)(function* () {\n      if (Platform.OS !== 'web') {\n        var _yield$ImagePicker$re = yield ImagePicker.requestMediaLibraryPermissionsAsync(),\n          status = _yield$ImagePicker$re.status;\n        if (status !== 'granted') {\n          alert('Permission to access media library is required!');\n          return;\n        }\n      }\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1\n      });\n      console.log(result);\n      if (!result.canceled) {\n        setSelectedImage(result.assets[0].uri);\n      }\n    })).apply(this, arguments);\n  };\n  var handleCameraPress = function handleCameraPress() {};\n  var handleSubmit = function handleSubmit() {};\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: styles.container,\n    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: '600'\n      },\n      children: \"  Crop Disease Predicator \"\n    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: styles.instructions,\n      children: \"Follow these steps to predict crop disease:\"\n    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: styles.step,\n      children: \"1. Select an image of the affected crop:\"\n    }), (0, _jsxRuntime.jsx)(_reactNative.View, {}), (0, _jsxRuntime.jsxs)(_reactNative.View, {\n      style: styles.imageOptions,\n      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n        onPress: handleCameraPress,\n        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.optionText,\n          children: \"Open Camera\"\n        })\n      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {\n        onPress: handleGalleryPress,\n        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n          style: styles.optionText,\n          children: \"Open Gallery\"\n        })\n      })]\n    }), selectedImage && (0, _jsxRuntime.jsx)(_reactNative.Image, {\n      source: {\n        uri: selectedImage\n      },\n      style: styles.selectedImage\n    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {\n      title: \"Submit\",\n      onPress: handleSubmit,\n      disabled: !selectedImage\n    })]\n  });\n};\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16\n  },\n  instructions: {\n    fontSize: 15,\n    marginTop: 10,\n    fontWeight: 'bold',\n    marginBottom: 16\n  },\n  step: {\n    fontSize: 16,\n    marginBottom: 8\n  },\n  imageOptions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16\n  },\n  optionText: {\n    fontSize: 16,\n    color: 'blue',\n    textDecorationLine: 'underline'\n  },\n  selectedImage: {\n    width: '100%',\n    height: 200,\n    resizeMode: 'cover',\n    marginBottom: 16\n  }\n});\nvar _default = CropDiseasePredictionScreen;\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","ImagePicker","_jsxRuntime","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CropDiseasePredictionScreen","_ref","_useState","useState","_useState2","_slicedToArray2","selectedImage","setSelectedImage","handleGalleryPress","_asyncToGenerator2","Platform","OS","_yield$ImagePicker$re","requestMediaLibraryPermissionsAsync","status","alert","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","console","log","canceled","assets","uri","apply","arguments","handleCameraPress","handleSubmit","jsxs","View","style","styles","container","children","jsx","Text","fontSize","fontWeight","instructions","step","imageOptions","TouchableOpacity","onPress","optionText","Image","source","Button","title","disabled","StyleSheet","create","flex","padding","marginTop","marginBottom","flexDirection","justifyContent","color","textDecorationLine","width","height","resizeMode","_default","exports"],"sources":["E:/Crop Disease Classifier- Hackaton project/Android App/src/EXPO/Screens/Crop Model Screens/DiseasePrediction.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, Button, Image, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nconst CropDiseasePredictionScreen = () => {\r\n\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  // Function to handle image selection from the gallery\r\n  const handleGalleryPress = async () => {\r\n    if (Platform.OS !== 'web') {\r\n      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n      if (status !== 'granted') {\r\n        alert('Permission to access media library is required!');\r\n        return;\r\n      } \r\n  }\r\n\r\n  const result = await ImagePicker.launchImageLibraryAsync({\r\n    mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n    allowsEditing: true,\r\n    aspect: [4, 3],\r\n    quality: 1,\r\n  });\r\n\r\n  console.log(result)\r\n\r\n  if (!result.canceled) {\r\n    setSelectedImage(result.assets[0].uri);\r\n  }\r\n};\r\n\r\n  // Function to handle image capture from the camera\r\n  const handleCameraPress = () => {\r\n  };\r\n\r\n  // Function to submit the selected image for disease prediction\r\n  const handleSubmit = () => {\r\n  };\r\n\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n    <Text style={{fontSize:20 , fontWeight:'600'}}>  Crop Disease Predicator </Text>\r\n\r\n      <Text style={styles.instructions}>\r\n        Follow these steps to predict crop disease:\r\n      </Text>\r\n\r\n      <Text style={styles.step}>\r\n        1. Select an image of the affected crop:\r\n      </Text>\r\n\r\n      <View>\r\n\r\n      </View>\r\n\r\n      {/* Options to open camera or gallery */}\r\n      <View style={styles.imageOptions}>\r\n        <TouchableOpacity onPress={handleCameraPress}>\r\n          <Text style={styles.optionText}>Open Camera</Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity onPress={handleGalleryPress}>\r\n          <Text style={styles.optionText}>Open Gallery</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/* Display the selected image */}\r\n      {selectedImage && (\r\n        <Image source={{ uri: selectedImage }} style={styles.selectedImage} />\r\n      )}\r\n\r\n      {/* Submit button */}\r\n      <Button title=\"Submit\" onPress={handleSubmit} disabled={!selectedImage} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n  },\r\n  instructions: {\r\n    fontSize: 15,\r\n    marginTop : 10 ,\r\n    fontWeight: 'bold',\r\n    marginBottom: 16,\r\n  },\r\n  step: {\r\n    fontSize: 16,\r\n    marginBottom: 8,\r\n  },\r\n  imageOptions: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 16,\r\n  },\r\n  optionText: {\r\n    fontSize: 16,\r\n    color: 'blue',\r\n    textDecorationLine: 'underline',\r\n  },\r\n  selectedImage: {\r\n    width: '100%',\r\n    height: 200,\r\n    resizeMode: 'cover',\r\n    marginBottom: 16,\r\n  },\r\n});\r\n\r\nexport default CropDiseasePredictionScreen;\r\n\r\n/*\r\n{\"assets\": [\r\n  {\"assetId\": null,\r\n   \"base64\": null, \r\n   \"duration\": null, \r\n   \"exif\": null, \r\n   \"height\": 1716,\r\n    \"rotation\": null,\r\n     \"type\": \"image\", \r\n     \"uri\": \"file:///data/user/0/host.exp.exponent/cache/ExperienceData/%2540anonymous%252FAgriIntel-c23264c5-d3d3-450a-864c-056d16a02dc1/ImagePicker/0f57073d-db06-4b18-b090-3014ac80b04e.png\",\r\n      \"width\": 2288\r\n    }\r\n    ],\r\n   \"canceled\": false, \"cancelled\": undefined}\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}