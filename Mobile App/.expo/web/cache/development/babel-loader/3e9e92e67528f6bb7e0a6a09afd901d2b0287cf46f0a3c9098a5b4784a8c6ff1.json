{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnimatedContainer = AnimatedContainer;\nexports.animatedValueFor = animatedValueFor;\nexports.dampingFor = dampingFor;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _contexts = require(\"../contexts\");\nvar _hooks = require(\"../hooks\");\nvar _func = require(\"../utils/func\");\nvar _number = require(\"../utils/number\");\nvar _testId = require(\"../utils/test-id\");\nvar _AnimatedContainer = require(\"./AnimatedContainer.styles\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"E:\\\\Crop Disease Classifier- Hackaton project\\\\Android App\\\\node_modules\\\\react-native-toast-message\\\\lib\\\\src\\\\components\\\\AnimatedContainer.js\";\nfunction dampingFor(gesture, position) {\n  var moveY = gesture.moveY;\n  switch (position) {\n    case 'bottom':\n      {\n        var _Dimensions$get = _reactNative.Dimensions.get('screen'),\n          screenHeight = _Dimensions$get.height;\n        return Math.abs(screenHeight - moveY);\n      }\n    case 'top':\n      return Math.abs(moveY);\n    default:\n      throw new Error(`Toast position: ${position} not implemented`);\n  }\n}\nfunction animatedValueFor(gesture, position, damping) {\n  var boundValue = function boundValue(val) {\n    return (0, _number.bound)(val, 0, 2);\n  };\n  var dy = gesture.dy;\n  switch (position) {\n    case 'bottom':\n      return boundValue(1 - dy / damping);\n    case 'top':\n      return boundValue(1 + dy / damping);\n    default:\n      throw new Error(`Toast position: ${position} not implemented`);\n  }\n}\nfunction AnimatedContainer(_ref) {\n  var children = _ref.children,\n    isVisible = _ref.isVisible,\n    position = _ref.position,\n    topOffset = _ref.topOffset,\n    bottomOffset = _ref.bottomOffset,\n    keyboardOffset = _ref.keyboardOffset,\n    onHide = _ref.onHide,\n    _ref$onRestorePositio = _ref.onRestorePosition,\n    onRestorePosition = _ref$onRestorePositio === void 0 ? _func.noop : _ref$onRestorePositio;\n  var _useLogger = (0, _contexts.useLogger)(),\n    log = _useLogger.log;\n  var _useViewDimensions = (0, _hooks.useViewDimensions)(),\n    computeViewDimensions = _useViewDimensions.computeViewDimensions,\n    height = _useViewDimensions.height;\n  var _useSlideAnimation = (0, _hooks.useSlideAnimation)({\n      position: position,\n      height: height,\n      topOffset: topOffset,\n      bottomOffset: bottomOffset,\n      keyboardOffset: keyboardOffset\n    }),\n    animatedValue = _useSlideAnimation.animatedValue,\n    animate = _useSlideAnimation.animate,\n    animationStyles = _useSlideAnimation.animationStyles;\n  var onDismiss = _react.default.useCallback(function () {\n    log('Swipe, dismissing');\n    animate(0);\n    onHide();\n  }, [animate, log, onHide]);\n  var onRestore = _react.default.useCallback(function () {\n    log('Swipe, restoring to original position');\n    animate(1);\n    onRestorePosition();\n  }, [animate, log, onRestorePosition]);\n  var computeNewAnimatedValueForGesture = _react.default.useCallback(function (gesture) {\n    var damping = dampingFor(gesture, position);\n    var newAnimatedValue = animatedValueFor(gesture, position, damping);\n    return newAnimatedValue;\n  }, [position]);\n  var _usePanResponder = (0, _hooks.usePanResponder)({\n      animatedValue: animatedValue,\n      computeNewAnimatedValueForGesture: computeNewAnimatedValueForGesture,\n      onDismiss: onDismiss,\n      onRestore: onRestore\n    }),\n    panResponder = _usePanResponder.panResponder;\n  _react.default.useLayoutEffect(function () {\n    var newAnimationValue = isVisible ? 1 : 0;\n    animate(newAnimationValue);\n  }, [animate, isVisible]);\n  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, Object.assign({\n    testID: (0, _testId.getTestId)('AnimatedContainer'),\n    onLayout: computeViewDimensions,\n    style: [_AnimatedContainer.styles.base, _AnimatedContainer.styles[position], animationStyles],\n    pointerEvents: \"box-none\"\n  }, panResponder.panHandlers, {\n    children: children\n  }));\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_contexts","_hooks","_func","_number","_testId","_AnimatedContainer","_jsxRuntime","_jsxFileName","dampingFor","gesture","position","moveY","_Dimensions$get","Dimensions","get","screenHeight","height","Math","abs","Error","animatedValueFor","damping","boundValue","val","bound","dy","AnimatedContainer","_ref","children","isVisible","topOffset","bottomOffset","keyboardOffset","onHide","_ref$onRestorePositio","onRestorePosition","noop","_useLogger","useLogger","log","_useViewDimensions","useViewDimensions","computeViewDimensions","_useSlideAnimation","useSlideAnimation","animatedValue","animate","animationStyles","onDismiss","React","useCallback","onRestore","computeNewAnimatedValueForGesture","newAnimatedValue","_usePanResponder","usePanResponder","panResponder","useLayoutEffect","newAnimationValue","jsx","Animated","View","Object","assign","testID","getTestId","onLayout","style","styles","base","pointerEvents","panHandlers"],"sources":["E:/Crop Disease Classifier- Hackaton project/Android App/node_modules/react-native-toast-message/lib/src/components/AnimatedContainer.js"],"sourcesContent":["import React from 'react';\nimport { Animated, Dimensions } from 'react-native';\nimport { useLogger } from '../contexts';\nimport { usePanResponder, useSlideAnimation, useViewDimensions } from '../hooks';\nimport { noop } from '../utils/func';\nimport { bound } from '../utils/number';\nimport { getTestId } from '../utils/test-id';\nimport { styles } from './AnimatedContainer.styles';\n/**\n * Produces a positive damping value.\n *\n * To note: `moveY` becomes negative when going off-screen. By making sure the value\n * produced is always positive, we avoid issues like: https://github.com/calintamas/react-native-toast-message/issues/280\n */\nexport function dampingFor(gesture, position) {\n    const { moveY } = gesture;\n    switch (position) {\n        case 'bottom': {\n            const { height: screenHeight } = Dimensions.get('screen');\n            return Math.abs(screenHeight - moveY);\n        }\n        case 'top':\n            return Math.abs(moveY);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function animatedValueFor(gesture, position, damping) {\n    const boundValue = (val) => bound(val, 0, 2);\n    const { dy } = gesture;\n    switch (position) {\n        case 'bottom':\n            return boundValue(1 - dy / damping);\n        case 'top':\n            return boundValue(1 + dy / damping);\n        default:\n            throw new Error(`Toast position: ${position} not implemented`);\n    }\n}\nexport function AnimatedContainer({ children, isVisible, position, topOffset, bottomOffset, keyboardOffset, onHide, onRestorePosition = noop }) {\n    const { log } = useLogger();\n    const { computeViewDimensions, height } = useViewDimensions();\n    const { animatedValue, animate, animationStyles } = useSlideAnimation({\n        position,\n        height,\n        topOffset,\n        bottomOffset,\n        keyboardOffset\n    });\n    const onDismiss = React.useCallback(() => {\n        log('Swipe, dismissing');\n        animate(0);\n        onHide();\n    }, [animate, log, onHide]);\n    const onRestore = React.useCallback(() => {\n        log('Swipe, restoring to original position');\n        animate(1);\n        onRestorePosition();\n    }, [animate, log, onRestorePosition]);\n    const computeNewAnimatedValueForGesture = React.useCallback((gesture) => {\n        const damping = dampingFor(gesture, position);\n        const newAnimatedValue = animatedValueFor(gesture, position, damping);\n        return newAnimatedValue;\n    }, [position]);\n    const { panResponder } = usePanResponder({\n        animatedValue,\n        computeNewAnimatedValueForGesture,\n        onDismiss,\n        onRestore\n    });\n    React.useLayoutEffect(() => {\n        const newAnimationValue = isVisible ? 1 : 0;\n        animate(newAnimationValue);\n    }, [animate, isVisible]);\n    return (<Animated.View testID={getTestId('AnimatedContainer')} onLayout={computeViewDimensions} style={[styles.base, styles[position], animationStyles]} \n    // This container View is never the target of touch events but its subviews can be.\n    // By doing this, tapping buttons behind the Toast is allowed\n    pointerEvents='box-none' {...panResponder.panHandlers}>\n      {children}\n    </Animated.View>);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}